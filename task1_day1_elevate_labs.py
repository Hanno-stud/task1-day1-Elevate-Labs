# -*- coding: utf-8 -*-
"""task1-day1-elevate-labs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P1JkoVmF6-OHfnYXFp9j1eL047I5mJ8U
"""

""" Task 1: Data Cleaning & Preprocessing (Titanic Dataset)
Step 1: Import the Dataset and Explore Basic Info """
# Step 1: Importing Libraries and Dataset
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# Load the Titanic dataset (ensure 'titanic.csv' is in the same folder)
df = pd.read_csv('Titanic-Dataset.csv')


df_initial = df.copy()  # copy of original dataset
df_copy2 = df.copy()  # copy of original dataset


# Basic Exploration
print("\n--- Dataset Head ---")
print(df.head())

print("\n\n--- Dataset Info ---")
print(df.info())

print("\n\n--- Null Values in Dataset ---")
print(df.isnull().sum())



""" Step 2: Handle Missing Values using Mean/Median/Imputation """

# Checking columns with null values
print("\n--- Missing Values Before Handling ---")
print(df.isnull().sum())

# Display Mean Values
age_mean = df['Age'].mean()
fare_mean = df['Fare'].mean()

print(f"\n\n--- Mean of Age: {age_mean:.2f} ---")
print(f"--- Mean of Fare: {fare_mean:.2f} ---")

# Fill 'Age' missing values with the median
# unsupported method syntax for a dataframe  = df['Age'].fillna(df['Age'].median(), inplace=True)
df.fillna({'Age': df['Age'].median()}, inplace=True)


# Fill 'Embarked' missing values with mode (most frequent)
# unsupported method syntax for a dataframe  = df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
df.fillna({'Embarked': df['Embarked'].mode()[0]}, inplace=True)


# Drop 'Cabin' due to too many missing values
df.drop('Cabin', axis=1, inplace=True)  # ---- column 'Cabin' dropped here -----

print("\n\n--- Missing Values After Handling ---")
print(df.isnull().sum())



""" Step 3: Convert Categorical Features into Numerical using Encoding """

# Label Encoding for 'Sex' column
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})

# One-Hot Encoding for 'Embarked' column
df = pd.get_dummies(df, columns=['Embarked'], drop_first=True)

print("\n--- Dataset After Encoding ---\n")
print(df.head())



""" Step 4: Normalize/Standardize Numerical Features """

# from sklearn.preprocessing import StandardScaler

# Select numerical columns to scale
numerical_features = ['Age', 'Fare']

scaler = StandardScaler()
df[numerical_features] = scaler.fit_transform(df[numerical_features])

print("\n--- Dataset After Normalization/Standardization ---\n")
print(df.head())



""" Step 5: Visualize Outliers using Boxplots and Remove Them """

# Visualizing Outliers
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(y=df['Age'])
plt.title('Boxplot of Age')

plt.subplot(1, 2, 2)
sns.boxplot(y=df['Fare'])
plt.title('Boxplot of Fare')
print("\n---- Visualize Outliers using BOXPLOTS ----\n")
plt.show()

# Outlier Removal using IQR method
def remove_outliers(column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Remove outliers from 'Fare'
df = remove_outliers('Fare')

print("\n\n--- Dataset Shape => 'AFTER OUTLIER REMOVAL' ---\n")
print(df.shape)

# Skills to learn: Data cleaning, handling nulls, encoding, feature scaling.

# 1. Data cleaning
# Display initial dataset shape and nulls
print("\n--- Initial Dataset Shape ---")
print(df_copy2.shape)

print("\n\n--- Null Values in Dataset Before Cleaning ---")
print(df_copy2.isnull().sum())

# Drop 'Cabin' column due to excessive missing values
df_cleaned = df_copy2.drop('Cabin', axis=1)

print("\n\n--- Dataset Columns After Dropping 'Cabin' ---")
print(df_cleaned.columns)



# 2. Handling Missing Values
print("\n--- Null Values Before Handling ---")
print(df_cleaned.isnull().sum())

# Fill 'Age' with median for 'df_cleaned'
# unsupported method syntax for a dataframe  =  df_cleaned['Age'].fillna(df_cleaned['Age'].median(), inplace=True)
df.fillna({'Age': df_cleaned['Age'].median()}, inplace=True)

# Fill 'Embarked' with mode for 'df_cleaned'
# unsupported method syntax for a dataframe  =  df_cleaned['Embarked'].fillna(df_cleaned['Embarked'].mode()[0], inplace=True)
df.fillna({'Embarked': df_cleaned['Embarked'].mode()[0]}, inplace=True)

print("\n\n--- Null Values After Handling ---")
print(df_cleaned.isnull().sum())



"""
Encoding (Categorical to Numerical)
Step-wise:

Encode Sex using label encoding.

Encode Embarked using one-hot encoding.
"""
# Label Encoding for 'Sex'
df_cleaned['Sex'] = df_cleaned['Sex'].map({'male': 0, 'female': 1})

# One-Hot Encoding for 'Embarked'
df_encoded = pd.get_dummies(df_cleaned, columns=['Embarked'], drop_first=True)

print("\n--- Encoded Dataset Columns ---")
print(df_encoded.columns)

print("\n--- First 5 Rows of Encoded Dataset ---")
print(df_encoded.head())



# Feature Scaling (Standardization)
from sklearn.preprocessing import StandardScaler

# Standardize numerical features
scaler = StandardScaler()
df_encoded[['Age', 'Fare']] = scaler.fit_transform(df_encoded[['Age', 'Fare']])

print("\n--- First 5 Rows After Feature Scaling ---")
print(df_encoded[['Age', 'Fare']].head())

